{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f28\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Courier 10 Pitch;}
{\f29\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Nimbus Sans L;}{\f31\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}TimesNewRoman,Bold;}{\f32\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}New Century Schlbk;}
{\f171\froman\fcharset238\fprq2 Times New Roman CE;}{\f172\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f174\froman\fcharset161\fprq2 Times New Roman Greek;}{\f175\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f176\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f177\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f178\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f187\fmodern\fcharset238\fprq1 Courier New CE;}
{\f188\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f190\fmodern\fcharset161\fprq1 Courier New Greek;}{\f191\fmodern\fcharset162\fprq1 Courier New Tur;}{\f192\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f193\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f194\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\sb440\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \b\f29\fs34\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 heading 1;}{\s2\ql \li0\ri0\sb440\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \b\f29\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 2;}{\s3\ql \li0\ri0\sb440\sa60\nowidctlpar\faauto\rin0\lin0\itap0 
\b\f29\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 3;}{\s4\ql \li0\ri0\sb440\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \b\f29\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 4;}{\*
\cs10 \additive Default Paragraph Font;}{\s15\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Contents 1;}{
\s16\ql \fi-431\li1440\ri0\nowidctlpar\faauto\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Contents 2;}{\s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f31\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext17 Default;}{\s18\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext18 Lower Roman List;}{
\s19\ql \li0\ri0\nowidctlpar\tx431\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext0 Numbered Heading 1;}{\s20\ql \li0\ri0\nowidctlpar\tx431\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon2 \snext0 Numbered Heading 2;}{\s21\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext21 Diamond List;}{
\s22\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \sbasedon0 \snext22 endnote text;}{\s23\ql \fi-431\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Contents 3;}{\s24\qj \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f32\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 Body Text;}{
\s25\ql \fi-431\li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Contents 4;}{\s26\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext26 Square List;}{\s27\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext27 Numbered List;}{\*\cs28 \additive \fs20 
Reference;}{\s29\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqc\tx8640\faauto\rin0\lin0\itap0 \f12\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext29 header;}{\s30\ql \li0\ri0\sa117\nowidctlpar\faauto\rin0\lin0\itap0 
\f31\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon17 \snext17 List Continue;}{\s31\ql \li0\ri0\nowidctlpar\tx431\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon3 \snext0 Numbered Heading 3;}{
\s32\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext32 Dashed List;}{\s33\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext33 Upper Roman List;}{\s34\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext34 Tick List;}{
\s35\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext35 Heart List;}{\s36\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext36 Box List;}{\*\cs37 \additive \fs20 Reference2;}{\s38\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqc\tx8640\faauto\rin0\lin0\itap0 \f12\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext38 footer;}{\s39\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext39 Upper Case List;}{\s40\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext40 Bullet List;}{\s41\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext41 Hand List;}{
\s42\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang4105\langfe1033\cgrid\langnp4105\langfenp1033 \sbasedon0 \snext42 footnote text;}{\s43\qc \li0\ri0\sb240\sa120\nowidctlpar\faauto\rin0\lin0\itap0 
\b\f29\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Contents Header;}{\s44\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext44 
Lower Case List;}{\s45\ql \li1440\ri1440\sa120\nowidctlpar\faauto\rin1440\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext45 Block Text;}{\s46\ql \li0\ri0\nowidctlpar\tx1584\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon19 \snext0 Chapter Heading;}{\s47\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext47 Plain Text;}{
\s48\ql \li0\ri0\nowidctlpar\tx1584\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon19 \snext0 Section Heading;}{\s49\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext49 Implies List;}{\s50\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext50 Star List;}{\*\cs51 \additive \fs20 
Reference1;}{\s52\ql \fi-431\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext52 Triangle List;}}{\*\listtable{\list\listtemplateid1046\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01\'b7;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-431\li720 }{\listname ;}\listid1000}}{\*\listoverridetable{\listoverride\listid1000
\listoverridecount0\ls1}}{\info{\author Earl}{\operator Earl}{\creatim\yr2010\mo3\dy11\hr2\min31}{\revtim\yr2010\mo3\dy11\hr2\min33}{\version2}{\edmins2}{\nofpages3}{\nofwords709}{\nofchars4046}{\nofcharsws4968}{\vern8269}}
\margl720\margr720\margt1080\margb720 \widowctrl\ftnbj\aenddoc\aftnnar\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \sbknone\linex0\colsx360\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\lang4105\langfe1033\langnp4105 Cosc 2P93: Prolog
\par Assignment #3
\par Due date: March 30}{\lang4105\langfe1033\super\langnp4105 th}{\lang4105\langfe1033\langnp4105 , 2010 (in class!)
\par Late date: April 1}{\lang4105\langfe1033\super\langnp4105 st}{\lang4105\langfe1033\langnp4105 , 2010 (in class!), 15% penalty applies
\par 
\par 1. }{\b\lang4105\langfe1033\langnp4105 String Tokenizer:}{\lang4105\langfe1033\langnp4105 
\par Problems 2 and 3 will require a good tokenizer. Thus, your first task is to implement one in prolog. A tokenizer takes a long string as an input, and breaks it up into multiple strings. The }{\i\lang4105\langfe1033\langnp4105 delimiter}{
\lang4105\langfe1033\langnp4105  is the character that indicates the splitting point between tokens.
\par For example, if the delimiter is a space, then the string, 'hello world', would be split into ['hello','world'].
\par Note that, for the purpose of this assignment, the tokenizer should split the source string into a list of tokens, and then return 
that list. For this assignment, just assume that space (' ') is the delimiter. Demonstrate your tokenizer by splitting up a few different input strings:
\par hello world
\par this is a test
\par machines
\par (and try a couple of your own)
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par Tips:
\par You'll want to use a better input method than what's been covered in class so far. SWI Prolog has a helpful predicate: read_line_to_codes/2.
\par The first argument is the stream (try }{\i\lang4105\langfe1033\langnp4105 user}{\lang4105\langfe1033\langnp4105 
). The second argument receives the entered strings as ASCII codes. This can be helpful, as it can make it very simple to identify delimiters (eg. a space is 32).
\par Remember that the name/2 predicate can convert a plaintext string to a list of character code
s and vice versa. After you've split the input into tokens (lists of character codes), remember to convert the tokens back into strings. Also ensure that the tokens remain in the same order (so, if I type }{\i\lang4105\langfe1033\langnp4105 hello there}{
\lang4105\langfe1033\langnp4105 , it should return [hello, there] rather than [there, hello] or [ereht, olleh]).
\par \page 
\par 2. }{\b\lang4105\langfe1033\langnp4105 Postfix Calculator:}{\lang4105\langfe1033\langnp4105 
\par This program will prompt the user for their input. After the user types in a postfix math problem, the program calculates the solution.
\par 
\par }{\f28\lang4105\langfe1033\langnp4105 ?- rpn.}{\lang4105\langfe1033\langnp4105 
\par }{\f28\lang4105\langfe1033\langnp4105 Please enter your mathy stuff: 2 3 4 + *
\par Solution: 14
\par true.
\par }{\lang4105\langfe1033\langnp4105 
\par The program need only recognize the basic operators: +,-,*,/.
\par You can assume 'sane' input: Don't bother checking for division by zero, or that the user only typed operators and numbers.
\par It should be able to accept an input of arbitrary length (as in the case of the example above).
\par All numbers and operators will be separated by spaces in the input.
\par 
\par 
\par 
\par Tips:
\par If you aren't familiar with postfix, the sample above equates to: 2 * ( 3 + 4 ) in infix notation.
\par If it isn't obvious, your first task will be to read the input from the user, and then break it up into space-delimited tokens.
\par You can easily find references on how to construct a postfix calculator online (if you didn't do it in first-year), but here are the basics:
\par {\pntext\pard\plain\f3\lang4105\langfe1033\langnp4105 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-431\li720\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnsp120\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin720\itap0 {
\lang4105\langfe1033\langnp4105 When you encounter an operand (number), push it on a stack.
\par {\pntext\pard\plain\f3\lang4105\langfe1033\langnp4105 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-431\li720\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnsp120\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin720\itap0 {
\lang4105\langfe1033\langnp4105 When you encounter an operator (+,-,*,/), pop two values off of the stack, perform the calculation with the operator encountered, and push the result back onto the stack.
\par {\pntext\pard\plain\f3\lang4105\langfe1033\langnp4105 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-431\li720\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnsp120\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin720\itap0 {
\lang4105\langfe1033\langnp4105 When you run out of tokens, the (only) item on the stack is the final solution.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\lang4105\langfe1033\langnp4105 
\par \page 
\par 3. }{\b\lang4105\langfe1033\langnp4105 The Knapsack Problem:}{\lang4105\langfe1033\langnp4105 
\par Suppose you have a bag (or sack of some sort) that has a limited capacity.
\par Suppose there are several items around you that have varying values and weights.
\par The goal is to decide on the best way to select items for the bag that will maximize the value, but not exceed the bag's capacity.
\par For input, you can use the sample included on the course webpage. Note that it is in tab-delimited format.
\par Your program should have a predicate: knapsack/1. Its only argument is the capacity of the bag.
\par An item may be chosen as many times as it appears in the input (thus, it may select napkin twice, but can only select tuxedo once).
\par 
\par }{\f28\lang4105\langfe1033\langnp4105 ?- knapsack(22).
\par napkin: V=1, W=1
\par napkin: V=1, W=1
\par turpentine: V=2, W=3
\par tuxedo: V=40, W=15
\par crown: V=95, W=6
\par sceptre: V=80, W=12
\par Data loaded.
\par 
\par Loot:
\par turpentine (3) [2]
\par sceptre (12) [80]
\par napkin (1) [1]
\par crown (6) [95]
\par Stash Value: 178
\par true.
\par }{\lang4105\langfe1033\langnp4105 
\par Note that it reports on the items selected, and the final total stash value.
\par You can use the same special predicate as before for input: read_line_to_codes/2.
\par For example, to read from file }{\i\lang4105\langfe1033\langnp4105 input}{\lang4105\langfe1033\langnp4105 :
\par 
\par }{\f28\lang4105\langfe1033\langnp4105 see(input),
\par seeing(InStream),
\par read_line_to_codes(InStream,Codes).
\par }{\lang4105\langfe1033\langnp4105 
\par However, this will only read a single line. Consult prolog's help for ideas on how to know when you've reached the end of the file (help(read_line_to_codes).). You should also consider using the assert predicate to have a handy place to store the read ite
ms (if only temporarily). If so, remember to have it retract any assertions before any reloads.
\par 
\par 
\par Tips:
\par Since the input is tab-delimited (unlike the space-delimited input used in the other parts), you'll need to change the delimiter of your tokenizer (the tab character is character code 9).
\par 
\par Some lazier approaches may work fine for the provided sample input, but run out of stack space if you create a larger input. This is fine so long as it isn\rquote t caused by an actual bug
; it's just a demonstration of why one might not want to brute-force the knapsack problem for larger instances.
\par }}